// <auto-generated />
using System;
using Baggr.Providers.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Baggr.Providers.Entities.Migrations
{
    [DbContext(typeof(ProvidersContext))]
    [Migration("20221209160650_ProductIsDeleted")]
    partial class ProductIsDeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Category", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Customer", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CityKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ComesFrom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Product", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryKey")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MerchantKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("SKU")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StockAvailability")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.HasIndex("CategoryKey");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderAnalyticsColour")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderLogo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("ProviderName")
                        .IsUnique();

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ProviderCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("MappedName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MylerzSubZoneId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderCities");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ProviderInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderInformations");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AWB")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomerPhoneNum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LastStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantCompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MerchantPhoneNum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NumberofPeices")
                        .HasColumnType("int");

                    b.Property<string>("OrderReference")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmountShouldBeCollected")
                        .HasColumnType("double");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("OrderReference")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ShipmentProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductKey");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentProducts");
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Product", b =>
                {
                    b.HasOne("Baggr.Providers.Entities.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ProviderCity", b =>
                {
                    b.HasOne("Baggr.Providers.Entities.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Baggr.Providers.Entities.Entities.Provider", "Provider")
                        .WithMany("ProviderCities")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ProviderInformation", b =>
                {
                    b.HasOne("Baggr.Providers.Entities.Entities.Provider", "Provider")
                        .WithMany("ProviderInformation")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.Shipment", b =>
                {
                    b.HasOne("Baggr.Providers.Entities.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Baggr.Providers.Entities.Entities.ShipmentProduct", b =>
                {
                    b.HasOne("Baggr.Providers.Entities.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductKey");

                    b.HasOne("Baggr.Providers.Entities.Entities.Shipment", "Shipment")
                        .WithMany("ShipmentProducts")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
